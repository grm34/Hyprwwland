#!/usr/bin/env bash
# Hyprwwland Copyright (c) 2023 darkmaster grm34.
# https://github.com/grm34/Hyprwwland


# Get required settings from config.json.
readarray -t config < \
  <(jaq '.aur_helper,
         .terminal_cmd' "$PWD/config.json")

# Define without double quotes.
aur_helper="${config[0]//\"}"
terminal_cmd="${config[1]//\"}"

# Run paru once to update the cache.
function check_updates() {
  printf '%s' "n" | sudo "$aur_helper" &>/dev/null
}

# Get number of pending updates (status).
function get_updates() {
  : "$(sudo "$aur_helper" -Qu | wc -l)"
  ! [[ $_ =~ ^[0-9]+$ ]] && : 0
  printf '%s' "$_"
}

# Notify according to request.
function notify_user() {
  case $1 in
    check) : "Checking for new updates..." ;;
    down)  : "Waiting for network..." ;;
    nb)    : "Arch Linux pending updates: $2" ;;
    up)    : "Arch Linux is already up to date !"
  esac
  dunstify -i "pacman" "$_"
}

# Exit if network is down.
: "$(eww get network_status)"
if [[ $_ == "none" ]]; then
  [[ $1 ]] && notify_user "down"
  printf '%s' "off"
  exit
fi

case $1 in
  update)
    # onclick: check, run terminal, check again, update status.
    : "$(get_updates)"
    (( _ == 0 )) && { notify_user "up" && exit ;}
    (( _ > 0 )) &&
      eval "$terminal_cmd" sudo "$aur_helper" & wait $!
    : "$(get_updates)"
    eww update pending_updates="$_"
    ;;
  check)
    # onclick: check, notify pending updates, update status.
    notify_user "check"
    check_updates
    nb="$(get_updates)"
    [[ $nb =~ ^[0-9]+$ ]] && canberra-gtk-play -i "window-question"
    : "nb" && [[ $nb == 0 ]] && : "up"
    notify_user "$_" "$nb"
    eww update pending_updates="$nb"
    ;;
  *)
    # onpoll: check and update status (if auto-up is true).
    : "$(eww get auto_up)"
    if [[ $_ != "false" ]]; then  
      check_updates
      : "$(get_updates)"
      eww update pending_updates="$_"
    fi
esac

