#!/usr/bin/env bash
# Hyprwwland > by darkmaster grm34.
# export RUST_BACKTRACE=full

# Get required settings from config.json.
readarray -t config <\
  <(jq '.launcher_app_path,
        .launcher_app_icon_path,
        .terminal_cmd' "$PWD/config.json")

# Remove double quotes.
app_path="${config[0]//\"}"
icon_path="${config[1]//\"}"
terminal_cmd="${config[2]//\"}"

# Get user apps.
readarray -t apps\
  < <(find "$app_path"/*\
           -mindepth 0 -maxdepth 2 -type f\
           -name "*.desktop" -readable)

# Create a widget for each app.
box=
for app in "${apps[@]}"; do
  # Skip nodisplay apps.
  grep -qm 1 "NoDisplay=true" "$app" && continue
  # Check for app icon (use help icon if none found).
  : "$(grep -m 1 "^Icon=" "$app")"
  icon="$icon_path/${_//Icon=}.svg"
  ! [[ -f $icon ]] && icon="$icon_path/help_index.svg"
  # Get app real name.
  : "$(grep -m 1 ^Name= "$app")" && name="${_//Name=}"
  # Get app executable.
  : "$(grep -m 1 ^Exec "$app")"
  : "${_//Exec=}" && : "${_//\"}" && : "${_%% *}"
  # Define the opening cmd (terminal or standalone). 
  cmd="$(which "$_") &"
  [[ $cmd == *"mpv &"* ]] && # fix mpv exec.
    cmd="${cmd//mpv/mpv --player-operation-mode=pseudo-gui}"
  { grep -qm 1 "Terminal=true" "$app"\
    || [[ $cmd == *himalaya* ]] ;} && # fix himalaya exec.
      cmd="$terminal_cmd ${cmd//himalaya/himalaya write}"
  cmd="eww close launcher_popup; $cmd"
  # Create the widget.
  box="$box
  (eventbox :class \"launcher-app-box\" :tooltip \"$name\"
            :onclick \"$cmd\" :cursor \"pointer\"
    (box :orientation \"v\" :space-evenly false :class \"app\"
      (image :path \"$icon\" :image-width 38)
      (label :text \"$name\" :limit-width 12)))"
done

printf '%s' "(box $box)" # This should output something...

