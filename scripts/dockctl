#!/usr/bin/env bash

# Hyprwwland Copyright (c) 2023 darkmaster grm34.
# https://github.com/grm34/Hyprwwland

# This script is executed by a polling variable.
# It recursively scans a folder for applications and
# returns a yuck widget containing each shortcut found.

# export RUST_BACKTRACE=full

# Get required settings from config.json.
readarray -t config <\
  <(jaq '.dock_app_path,
         .dock_app_icon_path,
         .dock_app_icon_size,
         .terminal_cmd' "$PWD/config.json")

# Remove double quotes.
app_path="${config[0]//\"}"
icon_path="${config[1]//\"}"
icon_size="${config[2]//\"}"
terminal_cmd="${config[3]//\"}"

# Get user apps.
readarray -t apps\
  < <(fd . "$app_path"\
           --min-depth 0 --max-depth 2\
           --type file --extension desktop)

# Skip nodisplay/Qt and icon less apps.
userapps=()
for app in "${apps[@]}"; do
  grep -qm 1 "NoDisplay=true\|Categories=Qt" "$app" &&
    continue
  : "$(grep -m 1 "^Icon=" "$app")"
  : "$icon_path/${_//Icon=}.svg"
  ! [[ -f $_ ]] && continue
  userapps+=("$app")
done

# Create a widget for each app.
index=0 && box=
for app in "${userapps[@]}"; do
  ((index > 14)) && break # Max 15 apps.

  # get app icon.
  : "$(grep -m 1 "^Icon=" "$app")"
  icon="$icon_path/${_//Icon=}.svg"

  # get app real name.
  : "$(grep -m 1 ^Name= "$app")"
  name="${_//Name=}"

  # define the opening cmd (terminal or standalone).
  : "$(grep -m 1 ^Exec "$app")"
  : "${_//Exec=}" && : "${_//\"}" && : "${_%% *}"
  cmd="$(which "$_") &"
  [[ $cmd == *"mpv &"* ]] && # fix mpv exec command.
    cmd="${cmd//mpv/mpv --player-operation-mode=pseudo-gui}"
  grep -qm 1 "Terminal=true" "$app" &&
    cmd="$terminal_cmd $cmd"
  [[ ${cmd// &} == *alacritty ]] && # open terminal from $HOME.
    cmd="${cmd// &} --working-directory $HOME &"

  # create the widget.
  box="$box
  (eventbox :class \"dock-app\" :tooltip \"$name\"
            :onclick \"$cmd\" :cursor \"pointer\"
    (image :path \"$icon\" :image-width \"$icon_size\"))"
  index=$((index + 1))
done

printf '%s'\
  "(box :orientation \"v\" ${box})" # Hmm, anything else?

